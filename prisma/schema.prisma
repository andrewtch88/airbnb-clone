// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime? 
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favouriteIds String[] @db.ObjectId

  accounts Account[] // one to many (a user can have multiple accounts, etc)
  listings Listing[] // ''
  reservations Reservation[] // ''
  reviews Review[] // ''
  appeals Appeal[] // ''
}

// OAuth
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  // relation of this Model's userId references User's id (store User's id in Account's userId)
  // many to one relationship - accounts belongs to one user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // cascasde means referenced record is deleted also

  @@index([userId], name: "index_accounts_on_user_id")
  @@unique([provider, providerAccountId])
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId // @id means PK
  title String
  description String
  imageSrc String[]
  averageRating Float @default(0)
  reviewCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  region String
  userId String @db.ObjectId
  price Int
  address String
  isSuspended Boolean @default(false)
  appeal Appeal? // one to one

  // many to one - multiple listings belongs to one user (store User's id in Listing's userId)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // relation, one to many (a listing can have multiple reservations)
  reservations Reservation[]
  reviews Review[]

  @@index([userId], name: "index_properties_on_user_id")
}

model Appeal {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId    String   @unique @db.ObjectId // one to one
  userId       String   @db.ObjectId
  appealLetter String
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade) // one to one

  @@index([userId], name: "index_appeals_on_userId")
  @@index([userId, listingId], name: "index_reviews_on_user_id_and_property_id")
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())
  hasReviewed Boolean @default(false)
  review Review? // one to one
  payment Payment? 

  // many to one - multiple reservations belong to one user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // many to one - multiple reservations belong to one listing
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId], name: "index_reservations_on_userId") // Index on userId for faster lookup of reservations made by a specific user
  @@index([listingId], name: "index_reservations_on_listingId") // Index on listingId for faster lookup of reservations for a specific listing
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  reservationId String @unique @db.ObjectId // one to one
  review String
  cleanlinessRating Int
  accuracyRating Int
  checkIn_Rating Int
  communicationRating Int
  locationRating Int
  valueRating Int
  finalRating Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade) // one to one
  // onDelete: Cascade to the @relation fields. 
  // This means if a relation record (e.g user) is deleted, any associated Review records will also be deleted.

  // Indexes  
  @@index([listingId], name: "index_reviews_on_listingId") // Index on listingId for faster lookup of reviews based on listing
  @@index([userId], name: "index_reviews_on_userId") // Index on userId for faster lookup of reviews written by a specific user
  @@index([userId, listingId, reservationId], name: "index_reviews_on_user_id_and_property_id_and_reservation_id")
  // Unique compound index on userId, listingId, and reservationId
  // This ensures that a user can only have one review for a specific listing and reservation combination
  // The unique constraint prevents duplicate reviews for the same user, listing, and reservation 
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  reservationId String @unique @db.ObjectId  // one to one
  totalAmount Int
  total_amount_currency String
  perNightPrice Int
  per_night_currency String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade) // one to one
}